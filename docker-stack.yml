version: "3"
  services:
    traefik:
      image: traefik:v1.2.0-rc2-alpine
      networks:
        - traefik
      ports:
        - "8080:80"
        - "8443:443"
        - "8090:8080"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
# Before running something like this stack in production, make sure you store both your Traefik toml config 
# file and acme.json in a durable volume that's mounted in the container:
#        - /data/traefik/config:/etc/traefik
      command: traefik --web -l DEBUG --docker --docker.swarmmode --docker.watch -c /etc/traefik/traefik.toml
      deploy:
        placement:
          constraints:
            - node.role == manager
  wordpress:
    image: wordpress:php7.1-fpm-alpine
    ports:
      - 8080:80
    networks:
      - common
    depends_on:
      - dbcluster
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      WORDPRESS_DB_HOST: "wpcluster"
      WORDPRESS_DB_NAME: "wordpress"
      WORDPRESS_DB_USER: "wordpress"
      WORDPRESS_DB_PASSWORD: "ChangeME"
      WORDPRESS_AUTH_KEY: "ChangeME"
      WORDPRESS_LOGGED_IN_KEY: "ChangeME"
      WORDPRESS_AUTH_SALT: "ChangeME"
      WORDPRESS_LOGGED_IN_SALT: "ChangeME"
    depends_on:
      - wpcluster
    networks:
      - wordpress-network
  wpcluster:
    image: gregnuj/mariadb-galera-swarm
    networks:
      - common
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: ChangeME 
      MYSQL_DATABASE: wordpress 
      MYSQL_USER: wordpress 
      MYSQL_PASSWORD: ChangeME 
      CLUSTER_MINIMUM: 3
      CLUSTER_NAME: wpcluster
    networks:
      - wordpress-network
